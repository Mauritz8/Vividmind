#include "psqt.hpp"
#include "board.hpp"


std::array<int, 64> KING_PSQT = {
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -20,-30,-30,-40,-40, 10,-30,-20,
    -10,-20,-20,-20,-20, 10,-20,-10,
     20, 20,  0,  0,  0,  0,  5, 20,
     20, 30, 10,  0,  0, 10, 30, 20,
};

std::array<int, 64> KING_ENDGAME_PSQT = {
    -50,-40,-30,-20,-20,-30,-40,-50,
    -30,-20,-10,  0,  0,-10,-20,-30,
    -30,-10, 20, 30, 30, 20,-10,-30,
    -30,-10, 30, 40, 40, 30,-10,-30,
    -30,-10, 30, 40, 40, 30,-10,-30,
    -30,-10, 20, 30, 30, 20,-10,-30,
    -30,-30,  0,  0,  0,  0,-30,-30,
    -50,-30,-30,-30,-30,-30,-30,-50
};

std::array<int, 64> BISHOP_PSQT = {
    -20,-10,-10,-10,-10,-10,-10,-20,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -10,  0,  5, 10, 10,  5,  0,-10,
    -10,  5,  5, 10, 10,  5,  5,-10,
    -10,  0, 10, 10, 10, 10,  0,-10,
    -10, 10, 10, 10, 10, 10, 10,-10,
    -10,  5,  0,  0,  0,  0,  5,-10,
    -20,-10,-10,-10,-10,-10,-10,-20,
};

std::array<int, 64> KNIGHT_PSQT = {
    -50,-40,-30,-30,-30,-30,-40,-50,
    -40,-20,  0,  0,  0,  0,-20,-40,
    -30,  0, 10, 15, 15, 10,  0,-30,
    -30,  5, 15, 20, 20, 15,  5,-30,
    -30,  0, 15, 20, 20, 15,  0,-30,
    -30,  5, 10, 15, 15, 10,  5,-30,
    -40,-20,  0,  5,  5,  0,-20,-40,
    -50,-40,-30,-30,-30,-30,-40,-50,
};

std::array<int, 64> PAWN_PSQT = {
      0,  0,  0,  0,  0,  0,  0,  0,
     50, 50, 50, 50, 50, 50, 50, 50,
     10, 10, 20, 30, 30, 20, 10, 10,
      5,  5, 10, 25, 25, 10,  5,  5,
      0,  0,  0, 20, 20,  0,  0,  0,
      5, -5,-10,  0,  0,-10, -5,  5,
      5, 10, 10,-20,-20, 10, 10,  5,
      0,  0,  0,  0,  0,  0,  0,  0,
};

std::array<int, 64> QUEEN_PSQT = {
    -20,-10,-10, -5, -5,-10,-10,-20,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -10,  0,  5,  5,  5,  5,  0,-10,
     -5,  0,  5,  5,  5,  5,  0, -5,
      0,  0,  5,  5,  5,  5,  0, -5,
    -10,  5,  5,  5,  5,  5,  0,-10,
    -10,  0,  5,  0,  0,  0,  0,-10,
    -20,-10,-10, -5, -5,-10,-10,-20,
};

std::array<int, 64> ROOK_PSQT = {
      0,  0,  0,  0,  0,  0,  0,  0,
      5, 10, 10, 10, 10, 10, 10,  5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
      0,  0,  0,  5,  5,  0,  0,  0,
};

std::array<int, 64> KING_MATE = {
    -50,-50,-50,-50,-50,-50,-50,-50,
    -50,-30,-30,-30,-30,-30,-30,-50,
    -50,-30, 30, 30, 30, 30,-30,-50,
    -50,-30, 30, 50, 50, 30,-30,-50,
    -50,-30, 30, 50, 50, 30,-30,-50,
    -50,-30, 30, 30, 30, 30,-30,-50,
    -50,-30,-30,-30,-30,-30,-30,-50,
    -50,-50,-50,-50,-50,-50,-50,-50,
};


int Board::get_psqt_score(const Piece& piece) const {
    const int x = piece.pos % 8;
    const int y = piece.pos / 8;
    const int square = piece.color == WHITE ? piece.pos : x + (7 - y) * 8;
    switch (piece.piece_type) {
        case KING: {
            if (is_lone_king(piece.color)) {
                return KING_MATE[square];
            }
            if (is_endgame()) {
                return KING_ENDGAME_PSQT[square];
            }
            return KING_PSQT[square];
        }
        case QUEEN: return QUEEN_PSQT[square];
        case ROOK: return ROOK_PSQT[square];
        case BISHOP: return BISHOP_PSQT[square];
        case KNIGHT: return KNIGHT_PSQT[square];
        case PAWN: return PAWN_PSQT[square];
    }
}
